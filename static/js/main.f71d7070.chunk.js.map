{"version":3,"sources":["utils/create-section-label.js","utils/fetch-sections.js","utils/scroll-to-element.js","PageHeader.js","theme.js","GlobalStyle.js","Card.js","UsingIDsExample/Section.js","SectionNavigationBox.js","UsingIDsExample/Navigation.js","UsingIDsExample/index.js","UsingIDsExample/UsingIDsExample.js","UsingCountersExample/Section.js","UsingCountersExample/Navigation.js","UsingCountersExample/UsingCountersExample.js","UsingCountersExample/index.js","UsingStateObjectExample/Section.js","UsingStateObjectExample/Navigation.js","UsingStateObjectExample/index.js","UsingStateObjectExample/UsingStateObjectExample.js","UsingRefsExample/Section.js","UsingRefsExample/Navigation.js","UsingStateExample/Section.js","UsingStateExample/Navigation.js","App.js","UsingStateExample/UsingStateExample.js","UsingRefsExample/UsingRefsExample.js","index.js"],"names":["createSectionLabel","section","id","toUpperCase","counter","fetchSections","map","addition","scrollToElement","node","scrollIntoView","behavior","block","PageHeader","onChangeSections","Box","as","pad","elevation","direction","justify","Heading","color","size","margin","Button","icon","label","onClick","theme","global","font","family","height","GlobalStyle","createGlobalStyle","Card","React","forwardRef","ref","background","fill","round","level","Section","SectionNavigationBox","children","gap","top","Navigation","sections","key","document","getElementById","UsingIDsExample","scrollCounter","useRef","useEffect","current","onNavClick","createCountersMap","reduce","acc","UsingCountersExample","useState","countersMap","setCountersMap","scrollState","UsingStateObjectExample","setScrollState","cardRef","useImperativeHandle","scroll","scrollSectionId","onSectionScrolled","EXAMPLES","title","component","setScrollSectionId","handleSectionScrolled","useCallback","refsMap","useMemo","createRef","App","setSections","StrictMode","Grommet","full","Tabs","Component","Tab","ReactDOM","render"],"mappings":"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","file":"static/js/main.f71d7070.chunk.js","sourcesContent":["const createSectionLabel = section => `Section ${section.id.toUpperCase()}`;\n\nexport default createSectionLabel;\n","let counter = 0;\n\n\nconst fetchSections = () => {\n    counter++;\n    if (counter % 2 === 0) {\n        return [0, 1, 2, 3].map(addition => ({ id: `${3 + addition}` }));\n    } else {\n        return [0, 1, 2, 3].map(addition => ({ id: `${1 + addition}` }));\n    }\n};\n\nexport default fetchSections;\n\n\n\n// const fetchSections = () => {\n//     const firstIndex = Math.floor(Math.random() * 10 + 1);\n//     return [0, 1, 2, 3].map(addition => ({ id: `${firstIndex + addition}` }));\n//   };\n  \n//   export default fetchSections;\n  ","// Could do this like window.scrollTo(0, refsMap[id].current.offsetTop);\n\nconst scrollToElement = node =>\n  node.scrollIntoView({ behavior: \"smooth\", block: \"start\" });\n\nexport default scrollToElement;\n","import React from \"react\";\nimport { Box, Button, Heading } from \"grommet\";\nimport * as Icons from \"grommet-icons\";\n\nconst PageHeader = ({ onChangeSections }) => (\n  <Box\n    as=\"header\"\n    pad=\"medium\"\n    elevation=\"medium\"\n    direction=\"row-responsive\"\n    justify=\"between\"\n  >\n    <Heading color=\"dark-1\" size=\"small\" margin=\"small\">\n      Imperative Updates in React\n    </Heading>\n    <Button\n      icon={<Icons.Refresh />}\n      label=\"Change Sections\"\n      onClick={onChangeSections}\n    />\n  </Box>\n);\n\nexport default PageHeader;\n","const theme = {\n  global: {\n    font: {\n      family: \"Roboto\",\n      size: \"16px\",\n      height: \"22px\"\n    }\n  }\n};\n\nexport default theme;\n","import { createGlobalStyle } from \"styled-components\";\n\nconst GlobalStyle = createGlobalStyle`\n  body {\n    margin: 0;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n  }\n\n  html {\n    scroll-behavior: smooth;\n  }\n`;\n\nexport default GlobalStyle;\n","import React from \"react\";\nimport { Box, Heading } from \"grommet\";\n\nconst Card = React.forwardRef(({ label, id }, ref) => (\n  <Box\n    ref={ref}\n    as=\"section\"\n    background=\"neutral-2\"\n    elevation=\"large\"\n    fill=\"horizontal\"\n    height=\"medium\"\n    pad=\"medium\"\n    round=\"medium\"\n    id={id}\n  >\n    <Heading level={2} margin=\"none\" size=\"small\">\n      {label}\n    </Heading>\n  </Box>\n));\n\nexport default Card;\n","import React from \"react\";\nimport Card from \"../Card\";\nimport { createSectionLabel } from \"../utils\";\n\nconst Section = ({ section }) => (\n  <Card id={section.id} label={createSectionLabel(section)} />\n);\n\nexport default Section;\n","import React from \"react\";\nimport { Box } from \"grommet\";\n\nconst SectionNavigationBox = ({ children }) => (\n  <Box\n    as=\"nav\"\n    direction=\"row-responsive\"\n    justify=\"center\"\n    gap=\"small\"\n    margin={{ top: \"medium\" }}\n  >\n    {children}\n  </Box>\n);\n\nexport default SectionNavigationBox;\n","import React from \"react\";\nimport { Button } from \"grommet\";\nimport SectionNavigationBox from \"../SectionNavigationBox\";\nimport { createSectionLabel, scrollToElement } from \"../utils\";\n\nconst Navigation = ({ sections }) => (\n  <SectionNavigationBox>\n    {sections.map(section => (\n      <Button\n        key={section.id}\n        label={`To ${createSectionLabel(section)}`}\n        onClick={() => scrollToElement(document.getElementById(section.id))}\n      />\n    ))}\n  </SectionNavigationBox>\n);\n\nexport default Navigation;\n","import UsingIDsExample from \"./UsingIDsExample\";\nexport default UsingIDsExample;\n","import React from \"react\";\nimport { Box } from \"grommet\";\nimport Section from \"./Section\";\nimport Navigation from \"./Navigation\";\n\nconst UsingIDsExample = ({ sections }) => (\n  <Box gap=\"medium\">\n    <Navigation sections={sections} />\n    <Box gap=\"large\">\n      {sections.map(section => (\n        <Section key={section.id} section={section} />\n      ))}\n    </Box>\n  </Box>\n);\n\nexport default UsingIDsExample;\n","import React from \"react\";\nimport Card from \"../Card\";\nimport { createSectionLabel, scrollToElement } from \"../utils\";\n\nconst Section = ({ section, scrollCounter }) => {\n  const ref = React.useRef();\n\n  React.useEffect(() => {\n    if (scrollCounter > 0) {\n      scrollToElement(ref.current);\n    }\n  }, [scrollCounter]);\n\n  return <Card ref={ref} label={createSectionLabel(section)} />;\n};\n\nexport default Section;\n","import React from \"react\";\nimport { Button } from \"grommet\";\nimport SectionNavigationBox from \"../SectionNavigationBox\";\nimport { createSectionLabel } from \"../utils\";\n\nconst Navigation = ({ sections, onNavClick }) => (\n  <SectionNavigationBox>\n    {sections.map(section => (\n      <Button\n        key={section.id}\n        label={`To ${createSectionLabel(section)}`}\n        onClick={() => onNavClick(section.id)}\n      />\n    ))}\n  </SectionNavigationBox>\n);\n\nexport default Navigation;\n","import React from \"react\";\nimport { Box } from \"grommet\";\nimport Section from \"./Section\";\nimport Navigation from \"./Navigation\";\n\nconst createCountersMap = sections =>\n  sections.reduce((acc, section) => {\n    acc[section.id] = 0;\n    return acc;\n  }, {});\n\nconst UsingCountersExample = ({ sections }) => {\n  const [countersMap, setCountersMap] = React.useState(() =>\n    createCountersMap(sections)\n  );\n\n  React.useEffect(() => {\n    setCountersMap(createCountersMap(sections));\n  }, [sections]);\n\n  const handleNavClick = id =>\n    setCountersMap(countersMap => ({\n      ...countersMap,\n      [id]: countersMap[id] + 1\n    }));\n\n  return (\n    <Box gap=\"medium\">\n      <Navigation sections={sections} onNavClick={handleNavClick} />\n      <Box gap=\"large\">\n        {sections.map(section => (\n          <Section\n            key={section.id}\n            section={section}\n            scrollCounter={countersMap[section.id]}\n          />\n        ))}\n      </Box>\n    </Box>\n  );\n};\n\nexport default UsingCountersExample;\n","import UsingCountersExample from \"./UsingCountersExample\";\nexport default UsingCountersExample;\n","import React from \"react\";\nimport Card from \"../Card\";\nimport { createSectionLabel, scrollToElement } from \"../utils\";\n\nconst Section = ({ section, scrollState }) => {\n  const ref = React.useRef();\n\n  React.useEffect(() => {\n    if (scrollState && scrollState.id === section.id) {\n      scrollToElement(ref.current);\n    }\n  }, [section.id, scrollState]);\n\n  return <Card ref={ref} label={createSectionLabel(section)} />;\n};\n\nexport default Section;\n","import React from \"react\";\nimport { Button } from \"grommet\";\nimport SectionNavigationBox from \"../SectionNavigationBox\";\nimport { createSectionLabel } from \"../utils\";\n\nconst Navigation = ({ sections, onNavClick }) => (\n  <SectionNavigationBox>\n    {sections.map(section => (\n      <Button\n        key={section.id}\n        label={`To ${createSectionLabel(section)}`}\n        onClick={() => onNavClick(section.id)}\n      />\n    ))}\n  </SectionNavigationBox>\n);\n\nexport default Navigation;\n","import UsingStateObjectExample from \"./UsingStateObjectExample\";\nexport default UsingStateObjectExample;\n","import React from \"react\";\nimport { Box } from \"grommet\";\nimport Section from \"./Section\";\nimport Navigation from \"./Navigation\";\n\nconst UsingStateObjectExample = ({ sections }) => {\n  const [scrollState, setScrollState] = React.useState(null);\n\n  React.useEffect(() => setScrollState(null), [sections]);\n\n  const handleNavClick = id => setScrollState({ id });\n\n  return (\n    <Box gap=\"medium\">\n      <Navigation sections={sections} onNavClick={handleNavClick} />\n      <Box gap=\"large\">\n        {sections.map(section => (\n          <Section\n            key={section.id}\n            section={section}\n            scrollState={scrollState}\n          />\n        ))}\n      </Box>\n    </Box>\n  );\n};\n\nexport default UsingStateObjectExample;\n","import React from \"react\";\nimport Card from \"../Card\";\nimport { createSectionLabel, scrollToElement } from \"../utils\";\n\nconst Section = React.forwardRef(({ section }, ref) => {\n  const cardRef = React.useRef();\n\n  React.useImperativeHandle(ref, () => ({\n    scroll: () => {\n      scrollToElement(cardRef.current);\n    }\n  }));\n\n  return <Card ref={cardRef} label={createSectionLabel(section)} />;\n});\n\nexport default Section;\n","import React from \"react\";\nimport { Button } from \"grommet\";\nimport SectionNavigationBox from \"../SectionNavigationBox\";\nimport { createSectionLabel } from \"../utils\";\n\nconst Navigation = ({ sections, onNavClick }) => (\n  <SectionNavigationBox>\n    {sections.map(section => (\n      <Button\n        key={section.id}\n        label={`To ${createSectionLabel(section)}`}\n        onClick={() => onNavClick(section.id)}\n      />\n    ))}\n  </SectionNavigationBox>\n);\n\nexport default Navigation;\n","import React from \"react\";\nimport Card from \"../Card\";\nimport { createSectionLabel, scrollToElement } from \"../utils\";\n\nconst Section = ({ section, scrollSectionId, onSectionScrolled }) => {\n  const ref = React.useRef();\n\n  React.useEffect(() => {\n    if (scrollSectionId && scrollSectionId === section.id) {\n      scrollToElement(ref.current);\n      onSectionScrolled();\n    }\n  }, [section.id, scrollSectionId, onSectionScrolled]);\n\n  return <Card ref={ref} label={createSectionLabel(section)} />;\n};\n\nexport default Section;\n","import React from \"react\";\nimport { Button } from \"grommet\";\nimport SectionNavigationBox from \"../SectionNavigationBox\";\nimport { createSectionLabel } from \"../utils\";\n\nconst Navigation = ({ sections, onNavClick }) => (\n  <SectionNavigationBox>\n    {sections.map(section => (\n      <Button\n        key={section.id}\n        label={`To ${createSectionLabel(section)}`}\n        onClick={() => onNavClick(section.id)}\n      />\n    ))}\n  </SectionNavigationBox>\n);\n\nexport default Navigation;\n","import React from \"react\";\nimport { Box, Grommet, Tab, Tabs } from \"grommet\";\nimport { fetchSections } from \"./utils\";\nimport PageHeader from \"./PageHeader\";\nimport theme from \"./theme\";\nimport GlobalStyle from \"./GlobalStyle\";\nimport UsingIDsExample from \"./UsingIDsExample\";\nimport UsingCountersExample from \"./UsingCountersExample\";\nimport UsingStateObjectExample from \"./UsingStateObjectExample\";\nimport UsingRefsExample from \"./UsingRefsExample\";\nimport UsingStateExample from \"./UsingStateExample\";\n\nconst EXAMPLES = [\n  { title: \"Using IDs\", component: UsingIDsExample },\n  { title: \"Using State\", component: UsingStateExample },\n  { title: \"Using Counters\", component: UsingCountersExample },\n  { title: \"Using a State Object\", component: UsingStateObjectExample },\n  { title: \"Using Refs\", component: UsingRefsExample }\n];\n\nconst App = () => {\n  const [sections, setSections] = React.useState(() => fetchSections());\n\n  return (\n    <React.StrictMode>\n      <GlobalStyle />\n      <Grommet full theme={theme}>\n        <PageHeader onChangeSections={() => setSections(fetchSections())} />\n        <Box as=\"main\" pad=\"medium\">\n          <Tabs>\n            {EXAMPLES.map(({ title, component: Component }) => (\n              <Tab key={title} title={title}>\n                <Component sections={sections} />\n              </Tab>\n            ))}\n          </Tabs>\n        </Box>\n      </Grommet>\n    </React.StrictMode>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport { Box } from \"grommet\";\nimport Section from \"./Section\";\nimport Navigation from \"./Navigation\";\n\nconst UsingStateExample = ({ sections }) => {\n  const [scrollSectionId, setScrollSectionId] = React.useState(null);\n\n  const handleSectionScrolled = React.useCallback(\n    () => setScrollSectionId(null),\n    []\n  );\n\n  return (\n    <Box gap=\"medium\">\n      <Navigation sections={sections} onNavClick={setScrollSectionId} />\n      <Box gap=\"large\">\n        {sections.map(section => (\n          <Section\n            key={section.id}\n            section={section}\n            scrollSectionId={scrollSectionId}\n            onSectionScrolled={handleSectionScrolled}\n          />\n        ))}\n      </Box>\n    </Box>\n  );\n};\n\nexport default UsingStateExample;\n","import React from \"react\";\nimport { Box } from \"grommet\";\nimport Section from \"./Section\";\nimport Navigation from \"./Navigation\";\n\nconst UsingRefsExample = ({ sections }) => {\n  const refsMap = React.useMemo(\n    () =>\n      sections.reduce((acc, section) => {\n        acc[section.id] = React.createRef();\n        return acc;\n      }, {}),\n    [sections]\n  );\n\n  const handleNavClick = id => refsMap[id].current.scroll();\n\n  return (\n    <Box gap=\"medium\">\n      <Navigation sections={sections} onNavClick={handleNavClick} />\n      <Box gap=\"large\">\n        {sections.map(section => (\n          <Section\n            key={section.id}\n            section={section}\n            ref={refsMap[section.id]}\n          />\n        ))}\n      </Box>\n    </Box>\n  );\n};\n\nexport default UsingRefsExample;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}